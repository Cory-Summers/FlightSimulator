%{
#include <iostream>
#include <cstdint>
#include <fstream>
#include <memory>
#include <algorithm>
#include <cstdio>
#include <stack>
#include "planetary-data.h"
#include "cyrus-container.h"
void RemoveQuotes(std::string & s)
{
  s.erase(
    std::remove( s.begin(), s.end(), '\"' ),
    s.end()
    );
}
int yylex(void);
int yyparse();
void yyerror(const char *);

%}
%parse-param {std::shared_ptr<cyrus::Container> & container} {std::stack<std::shared_ptr<cyrus::Data>> & data_stack}
%union{
  double  dval;
  int64_t ival;
  char *  sval;
  cyrus::Data * data_ptr;
}
%token <dval>   FLOAT
%token <ival>   INTEGER
%token <sval> STRING
%token <sval> SECTION_ID
%type  <sval> name
/*
%type <section_ptr> section_list
%type <object_ptr> object_list;
*/
%type <data_ptr> variable
%type <array_ptr> array_var
%%
section_list
  : SECTION_ID '{' object_list '}'
  | SECTION_ID '{' object_list '}'',' 
  ;
object_list
  : name '{' variable_list '}'',' object_list { data_stack.top()}
  | name '{' variable_list '}' 
  ;
variable_list
  : variable ',' variable_list {data_stack.top()->emplace($1)}
  | variable { data_stack.top()->emplace($1); data_stack.pop(); }
  ;
variable 
  : name STRING    { $$ = new cyrus::StringData($1, $2);   }
  | name FLOAT     { $$ = new cyrus::FloatingData($1, $2); }
  | name INTEGER   { $$ = new cyrus::IntegerData($1, $2);  }
  | name array_var { $$ = new cyrus::ArrayData($1, $2);    }
  ;
array_var
  : '[' array_list ']' { $$ = std::list<std::shared_ptr<cyrus::Data>(); }
  ;
array_list
  : variable ',' array_list { $<array_ptr>0.push_back($1); }
  | variable { $<array_ptr>0.push_back($1); }
  ;
name
  : STRING':' { $$ = RemoveQuotes($1); }
  ;

%%

std::shared_ptr<cyrus::Container> ReadCyrusFile(std::string const &)
{
  std::shared_ptr<cyrus::Container> container = std::make_shared<cyrus::Container>();
  std::stack<std::shared_ptr<cyrus::Data>> * data_stack = new std::stack<std::shared_ptr<cyrus::Data>>();
  yyparse(container, data_stack);
  return container;
}

int main(int argc, char * argv[])
{
  FILE * in_file = fopen(argv[1], "r");
  yyin = in_file;
  do{
    yyparse();
  } while(!feof(yyin));
  return 0;
}